!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/62f01448/
BOAT_LENGTH	Ocean.cpp	/^    const int BOAT_LENGTH = 4;  \/\/!< Length of a boat$/;"	v	namespace:CS170::WarBoats	typeref:typename:const int
Boat	WarBoats.h	/^    struct Boat$/;"	s	namespace:CS170::WarBoats
BoatPlacement	WarBoats.h	/^    enum BoatPlacement { bpACCEPTED, bpREJECTED };$/;"	g	namespace:CS170::WarBoats
CMAKE_CPP_FLAGS	CMakeLists.txt	/^set(CMAKE_CPP_FLAGS "${CMAKE_C_FLAGS} ${C_COMPILE_FLAGS}")$/;"	v
CMAKE_CPP_STANDARD	CMakeLists.txt	/^set(CMAKE_CPP_STANDARD 14)$/;"	v
CMAKE_CPP_STANDARD_REQUIRED	CMakeLists.txt	/^set(CMAKE_CPP_STANDARD_REQUIRED True)$/;"	v
CPP_COMPILE_FLAGS	CMakeLists.txt	/^set(CPP_COMPILE_FLAGS "-g -O0 -Wall -Wextra")$/;"	v
CS170	Ocean.cpp	/^namespace CS170$/;"	n	file:
CS170	Ocean.h	/^namespace CS170$/;"	n
CS170	PRNG.cpp	/^namespace CS170$/;"	n	file:
CS170	PRNG.h	/^namespace CS170$/;"	n
CS170	WarBoats.h	/^namespace CS170$/;"	n
DamageType	WarBoats.h	/^    enum DamageType { dtOK = 0, dtBLOWNUP = -1 };$/;"	g	namespace:CS170::WarBoats
DumpOcean	Ocean.cpp	/^    void DumpOcean(const CS170::WarBoats::Ocean &ocean,$/;"	f	namespace:CS170::WarBoats	typeref:typename:void
HIT_OFFSET	Ocean.cpp	/^    const int HIT_OFFSET = 100; \/\/!< Add this to the boat ID$/;"	v	namespace:CS170::WarBoats	typeref:typename:const int
ID	WarBoats.h	/^      int ID;                   \/\/!< Unique ID $/;"	m	struct:CS170::WarBoats::Boat	typeref:typename:int
OCEAN_H	Ocean.h	/^#define OCEAN_H$/;"	d
Ocean	Ocean.h	/^    struct Ocean$/;"	s	namespace:CS170::WarBoats
Orientation	WarBoats.h	/^    enum Orientation { oHORIZONTAL, oVERTICAL };$/;"	g	namespace:CS170::WarBoats
PRNG_H	PRNG.h	/^#define PRNG_H$/;"	d
Point	WarBoats.h	/^    struct Point$/;"	s	namespace:CS170::WarBoats
PrintShotResult	driver-big.cpp	/^void PrintShotResult(const CS170::WarBoats::ShotResult &sr)$/;"	f	typeref:typename:void
PrintShotResult	driver-sample.cpp	/^void PrintShotResult(const CS170::WarBoats::ShotResult &sr)$/;"	f	typeref:typename:void
PrintStats	driver-big.cpp	/^void PrintStats(const CS170::WarBoats::ShotStats &stats)$/;"	f	typeref:typename:void
PrintStats	driver-sample.cpp	/^void PrintStats(const CS170::WarBoats::ShotStats &stats)$/;"	f	typeref:typename:void
Random	PRNG.cpp	/^    int Random(int low, int high)$/;"	f	namespace:CS170::Utils	typeref:typename:int
SEED_X	PRNG.cpp	/^    static unsigned int SEED_X = 521288629;$/;"	v	namespace:CS170::Utils	typeref:typename:unsigned int	file:
SEED_Y	PRNG.cpp	/^    static unsigned int SEED_Y = 362436069;$/;"	v	namespace:CS170::Utils	typeref:typename:unsigned int	file:
ShotResult	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	g	namespace:CS170::WarBoats
ShotStats	WarBoats.h	/^    struct ShotStats$/;"	s	namespace:CS170::WarBoats
TakeAShot	driver-big.cpp	/^void TakeAShot(CS170::WarBoats::Ocean &ocean, const CS170::WarBoats::Point& pt)$/;"	f	typeref:typename:void
TakeAShot	driver-sample.cpp	/^void TakeAShot(CS170::WarBoats::Ocean &ocean, const CS170::WarBoats::Point& pt)$/;"	f	typeref:typename:void
Utils	PRNG.cpp	/^  namespace Utils$/;"	n	namespace:CS170	file:
Utils	PRNG.h	/^  namespace Utils$/;"	n	namespace:CS170
WARBOATS_H	WarBoats.h	/^#define WARBOATS_H$/;"	d
WarBoats	Ocean.cpp	/^  namespace WarBoats$/;"	n	namespace:CS170	file:
WarBoats	Ocean.h	/^  namespace WarBoats$/;"	n	namespace:CS170
WarBoats	WarBoats.h	/^  namespace WarBoats$/;"	n	namespace:CS170
boats	Ocean.h	/^      Boat *boats;      \/\/!< The dynamic array of boats$/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:Boat *
bpACCEPTED	WarBoats.h	/^    enum BoatPlacement { bpACCEPTED, bpREJECTED };$/;"	e	enum:CS170::WarBoats::BoatPlacement
bpREJECTED	WarBoats.h	/^    enum BoatPlacement { bpACCEPTED, bpREJECTED };$/;"	e	enum:CS170::WarBoats::BoatPlacement
dtBLOWNUP	WarBoats.h	/^    enum DamageType { dtOK = 0, dtBLOWNUP = -1 };$/;"	e	enum:CS170::WarBoats::DamageType
dtOK	WarBoats.h	/^    enum DamageType { dtOK = 0, dtBLOWNUP = -1 };$/;"	e	enum:CS170::WarBoats::DamageType
duplicates	WarBoats.h	/^      int duplicates; \/\/!< The number of duplicate (misses\/hits)$/;"	m	struct:CS170::WarBoats::ShotStats	typeref:typename:int
dynamic_2d_array	CMakeLists.txt	/^project(dynamic_2d_array)$/;"	p
grid	Ocean.h	/^      int *grid;        \/\/!< The 2D ocean $/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:int *
hits	WarBoats.h	/^      int hits;                 \/\/!< Hits taken so far$/;"	m	struct:CS170::WarBoats::Boat	typeref:typename:int
hits	WarBoats.h	/^      int hits;       \/\/!< The number of boat hits$/;"	m	struct:CS170::WarBoats::ShotStats	typeref:typename:int
main	CMakeLists.txt	/^add_executable(main main.c)$/;"	t
main	driver-big.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	driver-sample.cpp	/^int main(void)$/;"	f	typeref:typename:int
misses	WarBoats.h	/^      int misses;     \/\/!< The number of boat misses$/;"	m	struct:CS170::WarBoats::ShotStats	typeref:typename:int
num_boats	Ocean.h	/^      int num_boats;    \/\/!< Number of boats in the ocean$/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:int
oHORIZONTAL	WarBoats.h	/^    enum Orientation { oHORIZONTAL, oVERTICAL };$/;"	e	enum:CS170::WarBoats::Orientation
oVERTICAL	WarBoats.h	/^    enum Orientation { oHORIZONTAL, oVERTICAL };$/;"	e	enum:CS170::WarBoats::Orientation
orientation	WarBoats.h	/^      Orientation orientation;  \/\/!< Horizontal\/Vertical$/;"	m	struct:CS170::WarBoats::Boat	typeref:typename:Orientation
position	WarBoats.h	/^      Point position;           \/\/!< x-y coordinate (left-top)$/;"	m	struct:CS170::WarBoats::Boat	typeref:typename:Point
rand	PRNG.cpp	/^    unsigned rand(void)$/;"	f	namespace:CS170::Utils	typeref:typename:unsigned
srDUPLICATE	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	e	enum:CS170::WarBoats::ShotResult
srHIT	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	e	enum:CS170::WarBoats::ShotResult
srILLEGAL	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	e	enum:CS170::WarBoats::ShotResult
srMISS	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	e	enum:CS170::WarBoats::ShotResult
srSUNK	WarBoats.h	/^    enum ShotResult { srHIT, srMISS, srDUPLICATE, srSUNK, srILLEGAL };$/;"	e	enum:CS170::WarBoats::ShotResult
srand	PRNG.cpp	/^    void srand(unsigned seed1, unsigned seed2)$/;"	f	namespace:CS170::Utils	typeref:typename:void
stats	Ocean.h	/^      ShotStats stats;  \/\/!< Status of the attack$/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:ShotStats
sunk	WarBoats.h	/^      int sunk;       \/\/!< The number of boats sunk$/;"	m	struct:CS170::WarBoats::ShotStats	typeref:typename:int
test0	driver-sample.cpp	/^void test0(void)$/;"	f	typeref:typename:void
test1	driver-sample.cpp	/^void test1(void)$/;"	f	typeref:typename:void
test2	driver-sample.cpp	/^void test2(void)$/;"	f	typeref:typename:void
test_rect	driver-big.cpp	/^void test_rect(int num_boats, int xsize, int ysize, $/;"	f	typeref:typename:void
x	WarBoats.h	/^      int x; \/\/!< x-coordinate (column)$/;"	m	struct:CS170::WarBoats::Point	typeref:typename:int
x_quadrants	Ocean.h	/^      int x_quadrants;  \/\/!< Ocean size along x-axis$/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:int
y	WarBoats.h	/^      int y; \/\/!< y-coordinate (row)$/;"	m	struct:CS170::WarBoats::Point	typeref:typename:int
y_quadrants	Ocean.h	/^      int y_quadrants;  \/\/!< Ocean size along y-axis$/;"	m	struct:CS170::WarBoats::Ocean	typeref:typename:int
